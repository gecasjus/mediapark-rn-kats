{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nimport { loadingCats } from \"../redux/kats/kats.actions\";\nexport var useName = function useName(kats) {\n  var dispatch = useDispatch();\n  var CancelToken = axios.CancelToken;\n  var source = CancelToken.source();\n\n  var getNames = function getNames() {\n    return _regeneratorRuntime.async(function getNames$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get('https://bikeindex.org/api/v3/manufacturers?page=0&per_page=100', {\n              cancelToken: source.token\n            }).then(function (res) {\n              var manufacturerNames = Object.values(res.data).map(function (i) {\n                return i.map(function (manufacturer) {\n                  return manufacturer.name;\n                });\n              });\n              var unnestedNames = manufacturerNames.flat();\n              console.log(unnestedNames);\n            }).catch(function (err) {\n              console.log('limited api requests(5 a day)');\n              console.log(err);\n            }));\n\n          case 3:\n            _context.next = 8;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n            throw _context.t0;\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n\n  useEffect(function () {\n    dispatch(loadingCats());\n    getNames();\n    return function () {\n      source.cancel();\n    };\n  }, []);\n};","map":{"version":3,"sources":["/Users/Justas/Desktop/kats/hooks/useName.js"],"names":["useEffect","useDispatch","axios","loadingCats","useName","kats","dispatch","CancelToken","source","getNames","get","cancelToken","token","then","res","manufacturerNames","Object","values","data","map","i","manufacturer","name","unnestedNames","flat","console","log","catch","err","cancel"],"mappings":";AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAQC,WAAR;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAU;AAE9B,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEA,MAAMM,WAAW,GAAGL,KAAK,CAACK,WAA1B;AACA,MAAMC,MAAM,GAAGD,WAAW,CAACC,MAAZ,EAAf;;AAEF,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAETP,KAAK,CAACQ,GAAN,CAAU,gEAAV,EAA4E;AACjFC,cAAAA,WAAW,EAAEH,MAAM,CAACI;AAD6D,aAA5E,EAGLC,IAHK,CAGA,UAAAC,GAAG,EAAI;AACZ,kBAAIC,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAcH,GAAG,CAACI,IAAlB,EACtBC,GADsB,CAClB,UAAAC,CAAC;AAAA,uBAAIA,CAAC,CACTD,GADQ,CACJ,UAAAE,YAAY;AAAA,yBAAIA,YAAY,CAACC,IAAjB;AAAA,iBADR,CAAJ;AAAA,eADiB,CAAxB;AAGC,kBAAIC,aAAa,GAAGR,iBAAiB,CAACS,IAAlB,EAApB;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;AACA,aATI,EAUJI,KAVI,CAUE,UAACC,GAAD,EAAS;AACfH,cAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAD,cAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AAIF,aAhBM,CAFS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAyBA5B,EAAAA,SAAS,CAAC,YAAM;AACfM,IAAAA,QAAQ,CAACH,WAAW,EAAZ,CAAR;AACAM,IAAAA,QAAQ;AACP,WAAO,YAAM;AACRD,MAAAA,MAAM,CAACqB,MAAP;AACH,KAFF;AAGD,GANQ,EAMN,EANM,CAAT;AAOA,CAvCM","sourcesContent":["import {useEffect} from 'react';\nimport { useDispatch } from \"react-redux\";\n\nimport axios from \"axios\";\n \nimport {loadingCats} from '../redux/kats/kats.actions'\n\nexport const useName = (kats) => {\n\n  \tconst dispatch = useDispatch();\n\n  \tconst CancelToken = axios.CancelToken;\n  \tconst source = CancelToken.source();\n//https://api.fungenerators.com/name/generate?category=car&limit=100\n\tconst getNames = async () => {\n\t\ttry {\n\t\t\tawait axios.get('https://bikeindex.org/api/v3/manufacturers?page=0&per_page=100', {\n    cancelToken: source.token\n  })\n\t\t\t.then(res => {\n\t\t\t\tlet manufacturerNames = Object.values(res.data)\n\t\t\t\t\t.map(i => i\n\t\t\t\t\t\t.map(manufacturer => manufacturer.name))\n\t\t\t\t\tlet unnestedNames = manufacturerNames.flat()\n\t\t\t\t\tconsole.log(unnestedNames)\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tconsole.log('limited api requests(5 a day)')\n\t\t\t\t\tconsole.log(err)\n\t\t\t\t// const katNames = res.data.contents.names\n\t\t\t\t// katNames.map(name => {\n\t\t\t\t// \tkats.push({cat: name}) \n\t\t})\n\n\t\t} catch (error) {\n\t\t\tthrow error\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tdispatch(loadingCats());\n\t\tgetNames();\n\t\t\treturn () => {\n\t      \tsource.cancel();\n    };\n\t}, [])\n}\n"]},"metadata":{},"sourceType":"module"}