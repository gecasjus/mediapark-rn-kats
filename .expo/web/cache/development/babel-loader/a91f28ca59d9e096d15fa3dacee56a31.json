{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nimport { loadingCats } from \"../redux/kats/kats.actions\";\nexport var useName = function useName(kats) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      names = _useState2[0],\n      setName = _useState2[1];\n\n  var dispatch = useDispatch();\n\n  var getNames = function getNames() {\n    return _regeneratorRuntime.async(function getNames$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get('https://api.fungenerators.com/name/generate?category=car&limit=100').then(function (res) {\n              console.log(res);\n              var katNames = res.data.contents.names;\n              katNames.map(function (name) {\n                kats.push({\n                  cat: name\n                });\n              });\n              setName(katNames);\n            }).catch(function (err) {\n              console.log('cannot getNames');\n              console.log(err);\n            }));\n\n          case 3:\n            _context.next = 8;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n            throw _context.t0;\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n\n  useEffect(function () {\n    dispatch(loadingCats());\n    getNames();\n    return function () {\n      source.cancel();\n    };\n  }, [dispatch]);\n  return {\n    names: names\n  };\n};","map":{"version":3,"sources":["/Users/Justas/Desktop/kats/hooks/useName.jsx"],"names":["useState","useEffect","useDispatch","axios","loadingCats","useName","kats","names","setName","dispatch","getNames","get","then","res","console","log","katNames","data","contents","map","name","push","cat","catch","err","source","cancel"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAQC,WAAR;AAIA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAU;AAAA,kBAEPN,QAAQ,CAAC,EAAD,CAFD;AAAA;AAAA,MAEzBO,KAFyB;AAAA,MAElBC,OAFkB;;AAK9B,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;;AAEF,MAAMQ,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAETP,KAAK,CAACQ,GAAN,CAAU,oEAAV,EACLC,IADK,CACA,UAAAC,GAAG,EAAI;AACZC,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,kBAAMG,QAAQ,GAAGH,GAAG,CAACI,IAAJ,CAASC,QAAT,CAAkBX,KAAnC;AACAS,cAAAA,QAAQ,CAACG,GAAT,CAAa,UAAAC,IAAI,EAAI;AACpBd,gBAAAA,IAAI,CAACe,IAAL,CAAU;AAACC,kBAAAA,GAAG,EAAEF;AAAN,iBAAV;AACA,eAFD;AAGAZ,cAAAA,OAAO,CAACQ,QAAD,CAAP;AACD,aARM,EASLO,KATK,CASC,UAACC,GAAD,EAAS;AAChBV,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,cAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACC,aAZK,CAFS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAoBAvB,EAAAA,SAAS,CAAC,YAAM;AACfQ,IAAAA,QAAQ,CAACL,WAAW,EAAZ,CAAR;AACAM,IAAAA,QAAQ;AACP,WAAO,YAAM;AACRe,MAAAA,MAAM,CAACC,MAAP;AACH,KAFF;AAGD,GANQ,EAMN,CAACjB,QAAD,CANM,CAAT;AAOA,SAAO;AAACF,IAAAA,KAAK,EAALA;AAAD,GAAP;AACA,CAnCM","sourcesContent":["import {useState, useEffect} from 'react';\nimport { useDispatch } from \"react-redux\";\n\nimport axios from \"axios\";\n \nimport {loadingCats} from '../redux/kats/kats.actions'\n\n//https://api.fungenerators.com/name/generate?category=car&limit=100\n\nexport const useName = (kats) => {\n\n\tconst [names, setName] = useState([])\n\n\n  \tconst dispatch = useDispatch();\n\n\tconst getNames = async () => {\n\t\ttry {\n\t\t\tawait axios.get('https://api.fungenerators.com/name/generate?category=car&limit=100')\n\t\t\t.then(res => {\n\t\t\t\tconsole.log(res)\n\t\t\t\tconst katNames = res.data.contents.names\n\t\t\t\tkatNames.map(name => {\n\t\t\t\t\tkats.push({cat: name}) \n\t\t\t\t})\n\t\t\t\tsetName(katNames)\n\t\t})\n\t\t\t.catch((err) => {\n\t\t\tconsole.log('cannot getNames')\n\t\t\tconsole.log(err)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\tthrow error\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tdispatch(loadingCats());\n\t\tgetNames();\n\t\t\treturn () => {\n\t      \tsource.cancel();\n    };\n\t}, [dispatch])\n\treturn {names}\n}\n"]},"metadata":{},"sourceType":"module"}