{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nimport { loadingCats } from \"../redux/kats/kats.actions\";\nimport { Config, names } from 'unique-names-generator';\nvar config = {\n  dictionaries: [names]\n};\nexport var useName = function useName(kats) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      names = _useState2[0],\n      setName = _useState2[1];\n\n  var dispatch = useDispatch();\n\n  var getNames = function getNames() {\n    var arr = config.slice(0, 100);\n    setName(arr);\n  };\n\n  useEffect(function () {\n    dispatch(loadingCats());\n    getNames();\n  }, []);\n  return {\n    names: names\n  };\n};","map":{"version":3,"sources":["/Users/Justas/Desktop/kats/hooks/useName.js"],"names":["useState","useEffect","useDispatch","axios","loadingCats","Config","names","config","dictionaries","useName","kats","setName","dispatch","getNames","arr","slice"],"mappings":";AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAQC,WAAR;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,wBAA9B;AAEA,IAAMC,MAAc,GAAG;AACrBC,EAAAA,YAAY,EAAE,CAACF,KAAD;AADO,CAAvB;AAIA,OAAO,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAU;AAAA,kBAEPV,QAAQ,CAAC,EAAD,CAFD;AAAA;AAAA,MAEzBM,KAFyB;AAAA,MAElBK,OAFkB;;AAK9B,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;;AAKD,MAAMW,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACtB,QAAIC,GAAG,GAAGP,MAAM,CAACQ,KAAP,CAAa,CAAb,EAAe,GAAf,CAAV;AACAJ,IAAAA,OAAO,CAACG,GAAD,CAAP;AACA,GAHD;;AA2BDb,EAAAA,SAAS,CAAC,YAAM;AACfW,IAAAA,QAAQ,CAACR,WAAW,EAAZ,CAAR;AACAS,IAAAA,QAAQ;AAIR,GANQ,EAMN,EANM,CAAT;AAOA,SAAO;AAACP,IAAAA,KAAK,EAALA;AAAD,GAAP;AACA,CA7CM","sourcesContent":["import {useState, useEffect} from 'react';\nimport { useDispatch } from \"react-redux\";\n\nimport axios from \"axios\";\n \nimport {loadingCats} from '../redux/kats/kats.actions';\nimport { Config, names } from 'unique-names-generator';\n\nconst config: Config = {\n  dictionaries: [names]\n}\n\nexport const useName = (kats) => {\n\n\tconst [names, setName] = useState([])\n\n\n  \tconst dispatch = useDispatch();\n\n  \t// const CancelToken = axios.CancelToken;\n  \t// const source = CancelToken.source();\n\n \tconst getNames = () => {\n \t\tlet arr = config.slice(0,100);\n \t\tsetName(arr)\n \t}\n\n\t// const getNames = async () => {\n\t// \ttry {\n\t// \t\tawait axios.get('https://api.fungenerators.com/name/generate?category=car&limit=100', {\n //    cancelToken: source.token\n //  })\n\t// \t\t.then(res => {\n\t// \t\t\tconsole.log(res)\n\t// \t\t\tconst katNames = res.data.contents.names\n\t// \t\t\tkatNames.map(name => {\n\t// \t\t\t\tkats.push({cat: name}) \n\t// \t\t\t})\n\t// \t\t\tsetName(katNames)\n\t// \t})\n\t// \t\t.catch((err) => {\n\t// \t\tconsole.log('limited api requests(5)')\n\t// \t\tconsole.log(err)\n\t// \t\t})\n\t// \t} catch (error) {\n\t// \t\tthrow error\n\t// \t}\n\t// }\n\n\tuseEffect(() => {\n\t\tdispatch(loadingCats());\n\t\tgetNames();\n\t\t\t// return () => {\n\t  //     \tsource.cancel();\n   //  };\n\t}, [])\n\treturn {names}\n}\n"]},"metadata":{},"sourceType":"module"}